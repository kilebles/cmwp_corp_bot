import re
import asyncio
from contextlib import suppress
from aiogram.types import Message, ReplyKeyboardRemove

from app.cmwp_corp_bot.presentation.keyboards.simple_kb import phone_request_kb, main_menu_kb



def is_russian(text: str) -> bool:
    return bool(re.fullmatch(r'[–ê-–Ø–∞-—è–Å—ë\- ]{2,50}', text.strip()))


def is_valid_email(text: str) -> bool:
    return bool(re.fullmatch(r'[^@\s]+@[^@\s]+\.[a-zA-Z0-9]+', text.strip()))


def normalize_phone(text: str) -> str:
    digits = re.sub(r'\D', '', text)
    if digits.startswith('8'):
        digits = '7' + digits[1:]
    elif digits.startswith('9') and len(digits) == 10:
        digits = '7' + digits
    elif digits.startswith('7'):
        pass
    else:
        return ''
    return f'+{digits}'


def is_valid_phone(text: str) -> bool:
    return bool(re.fullmatch(r'^\+7\d{10}$', normalize_phone(text)))


async def send_temp_warning(message: Message, text: str, delay: float = 3.0):
    warn = await message.answer(text)
    async def auto_delete():
        await asyncio.sleep(delay)
        with suppress(Exception):
            await warn.delete()
    asyncio.create_task(auto_delete())


async def registration_dialog(message: Message):
    # TODO: –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û:')
    while True:
        msg: Message = yield
        if is_russian(msg.text):
            full_name = msg.text.strip()
            break
        await send_temp_warning(msg, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞)')

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:')
    msg: Message = yield
    company = msg.text.strip()

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:')
    msg: Message = yield
    position = msg.text.strip()

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=phone_request_kb)
    while True:
        msg: Message = yield
        phone_raw = msg.contact.phone_number if msg.contact else msg.text
        if phone_raw and is_valid_phone(phone_raw):
            phone = normalize_phone(phone_raw)
            break
        await send_temp_warning(msg, '‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX')
        
    await message.answer('–í–≤–µ–¥–∏—Ç–µ email:', reply_markup=ReplyKeyboardRemove())
    while True:
        msg: Message = yield
        if is_valid_email(msg.text):
            email = msg.text.strip()
            break
        await send_temp_warning(msg, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')
        
    result = (
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!\n"
        f"üë§ –§–ò–û: {full_name}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
        f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {position}\n"
        f"üìß Email: {email}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )
    await message.answer(result, reply_markup=main_menu_kb)
    
